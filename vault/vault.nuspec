<?xml version="1.0" encoding="utf-8"?>
<!-- Do not remove this test for UTF-8: if ??? doesn?t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
  <metadata>
    <!-- Read this before publishing packages to chocolatey.org: https://github.com/chocolatey/chocolatey/wiki/CreatePackages -->
    <id>vault</id>
    <title>Vault</title>
    <version>0.6.2</version>
    <authors>Mitchell Hashimoto, HashiCorp</authors>
    <owners>James Toyer</owners>
    <summary>Vault is a tool for securely accessing secrets</summary>
    <description>
Vault is a tool for securely accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, certificates, and more. Vault provides a unified interface to any secret, while providing tight access control and recording a detailed audit log.

A modern system requires access to a multitude of secrets: database credentials, API keys for external services, credentials for service-oriented architecture communication, etc. Understanding who is accessing what secrets is already very difficult and platform-specific. Adding on key rolling, secure storage, and detailed audit logs is almost impossible without a custom solution. This is where Vault steps in.

The key features of Vault are:

* **Secure Secret Storage**: Arbitrary key/value secrets can be stored in Vault. Vault encrypts these secrets prior to writing them to persistent storage, so gaining access to the raw storage isn't enough to access your secrets. Vault can write to disk, [Consul](https://www.consul.io), and more.
* **Dynamic Secrets**: Vault can generate secrets on-demand for some systems, such as AWS or SQL databases. For example, when an application needs to access an S3 bucket, it asks Vault for credentials, and Vault will generate an AWS keypair with valid permissions on demand. After creating these dynamic secrets, Vault will also automatically revoke them after the lease is up.
* **Data Encryption**: Vault can encrypt and decrypt data without storing it. This allows security teams to define encryption parameters and developers to store encrypted data in a location such as SQL without having to design their own encryption methods.
* **Leasing and Renewal**: All secrets in Vault have a _lease_ associated with it. At the end of the lease, Vault will automatically revoke that secret. Clients are able to renew leases via built-in renew APIs.
* **Revocation**: Vault has built-in support for secret revocation. Vault can revoke not only single secrets, but a tree of secrets, for example all secrets read by a specific user, or all secrets of a particular type. Revocation assists in key rolling as well as locking down systems in the case of an intrusion.

For more information, see the [introduction section](https://www.vaultproject.io/intro) of the Vault website.
    </description>
    <releaseNotes>
## 0.6.2 (October 5, 2016)

DEPRECATIONS/CHANGES:

* Convergent Encryption v2: New keys in `transit` using convergent mode will use a new nonce derivation mechanism rather than require the user to supply a nonce. While not explicitly increasing security, it minimizes the likelihood that a user will use the mode improperly and impact the security of their keys. Keys in convergent mode that were created in v0.6.1 will continue to work with the same mechanism (user-supplied nonce).
* `etcd` HA off by default: Following in the footsteps of `dynamodb`, the `etcd` storage backend now requires that `ha_enabled` be explicitly specified in the configuration file. The backend currently has known broken HA behavior, so this flag discourages use by default without explicitly enabling it. If you are using this functionality, when upgrading, you should set `ha_enabled` to `"true"` *before* starting the new versions of Vault.
* Default/Max lease/token TTLs are now 32 days: In previous versions of Vault the default was 30 days, but moving it to 32 days allows some operations (e.g. reauthenticating, renewing, etc.) to be performed via a monthly cron job.
* AppRole Secret ID endpoints changed: Secret ID and Secret ID accessors are no longer part of request URLs. The GET and DELETE operations are now moved to new endpoints (`/lookup` and `/destroy`) which consumes the input from the body and not the URL.
* AppRole requires at least one constraint: previously it was sufficient to turn off all AppRole authentication constraints (secret ID, CIDR block) and use the role ID only. It is now required that at least one additional constraint is enabled. Existing roles are unaffected, but any new roles or updated roles will require this.
* Reading wrapped responses from `cubbyhole/response` is deprecated. The `sys/wrapping/unwrap` endpoint should be used instead as it provides additional security, auditing, and other benefits. The ability to read directly will be removed in a future release.
* Request Forwarding is now on by default: in 0.6.1 this required toggling on, but is now enabled by default. This can be disabled via the `"disable_clustering"` parameter in Vault's [config](https://www.vaultproject.io/docs/config/index.html), or per-request with the `X-Vault-No-Request-Forwarding` header.
* In prior versions a bug caused the `bound_iam_role_arn` value in the `aws-ec2` authentication backend to actually use the instance profile ARN. This has been corrected, but as a result there is a behavior change. To match using the instance profile ARN, a new parameter `bound_iam_instance_profile_arn` has been added. Existing roles will automatically transfer the value over to the correct parameter, but the next time the role is updated, the new meanings will take effect.

FEATURES:

* **Secret ID CIDR Restrictions in `AppRole`**: Secret IDs generated under an approle can now specify a list of CIDR blocks from where the requests to generate secret IDs should originate from. If an approle already has CIDR restrictions specified, the CIDR restrictions on the secret ID should be a subset of those specified on the role [GH-1910]
* **Initial Root Token PGP Encryption**: Similar to `generate-root`, the root token created at initialization time can now be PGP encrypted [GH-1883]
* **Support Chained Intermediate CAs in `pki`**: The `pki` backend now allows, when a CA cert is being supplied as a signed root or intermediate, a trust chain of arbitrary length. The chain is returned as a parameter at certificate issue/sign time and is retrievable independently as well. [GH-1694]
* **Response Wrapping Enhancements**: There are new endpoints to look up response wrapped token parameters; wrap arbitrary values; rotate wrapping tokens; and unwrap with enhanced validation. In addition, list operations can now be response-wrapped. [GH-1927]
* Transit features: The `transit` backend now supports generating random bytes and SHA sums; HMACs; and signing and verification functionality using EC keys (P-256 curve)

IMPROVEMENTS:

* api: Return error when an invalid (as opposed to incorrect) unseal key is submitted, rather than ignoring it [GH-1782]
* api: Add method to call `auth/token/create-orphan` endpoint [GH-1834]
* api: Rekey operation now redirects from standbys to master [GH-1862]
* audit/file: Sending a `SIGHUP` to Vault now causes Vault to close and re-open the log file, making it easier to rotate audit logs [GH-1953]
* auth/aws-ec2: EC2 instances can get authenticated by presenting the identity document and its SHA256 RSA digest [GH-1961]
* auth/aws-ec2: IAM bound parameters on the aws-ec2 backend will perform a prefix match instead of exact match [GH-1943]
* auth/aws-ec2: Added a new constraint `bound_iam_instance_profile_arn` to refer to IAM instance profile ARN and fixed the earlier `bound_iam_role_arn` to refer to IAM role ARN instead of the instance profile ARN [GH-1913]
* auth/aws-ec2: Backend generates the nonce by default and clients can explicitly disable reauthentication by setting empty nonce [GH-1889]
* auth/token: Added warnings if tokens and accessors are used in URLs [GH-1806]
* command/format: The `format` flag on select CLI commands takes `yml` as an alias for `yaml` [GH-1899]
* core: Allow the size of the read cache to be set via the config file, and change the default value to 1MB (from 32KB) [GH-1784]
* core: Allow single and two-character path parameters for most places [GH-1811]
* core: Allow list operations to be response-wrapped [GH-1814]
* core: Provide better protection against timing attacks in Shamir code [GH-1877]
* core: Unmounting/disabling backends no longer returns an error if the mount didn't exist. This is line with elsewhere in Vault's API where `DELETE` is an idempotent operation. [GH-1903]
* credential/approle: At least one constraint is required to be enabled while creating and updating a role [GH-1882]
* secret/cassandra: Added consistency level for use with roles [GH-1931]
* secret/mysql: SQL for revoking user can be configured on the role [GH-1914]
* secret/transit: Use HKDF (RFC 5869) as the key derivation function for new keys [GH-1812]
* secret/transit: Empty plaintext values are now allowed [GH-1874]

BUG FIXES:

* audit: Fix panic being caused by some values logging as underlying Go types instead of formatted strings [GH-1912]
* auth/approle: Fixed panic on deleting approle that doesn't exist [GH-1920]
* auth/approle: Not letting secret IDs and secret ID accessors to get logged in plaintext in audit logs [GH-1947]
* auth/aws-ec2: Allow authentication if the underlying host is in a bad state but the instance is running [GH-1884]
* auth/token: Fixed metadata getting missed out from token lookup response by gracefully handling token entry upgrade [GH-1924]
* cli: Don't error on newline in token file [GH-1774]
* core: Pass back content-type header for forwarded requests [GH-1791]
* core: Fix panic if the same key was given twice to `generate-root` [GH-1827]
* core: Fix potential deadlock on unmount/remount [GH-1793]
* physical/file: Remove empty directories from the `file` storage backend [GH-1821]
* physical/zookeeper: Remove empty directories from the `zookeeper` storage backend and add a fix to the `file` storage backend's logic [GH-1964]
* secret/aws: Added update operation to `aws/sts` path to consider `ttl` parameter [39b75c6]
* secret/aws: Mark STS secrets as non-renewable [GH-1804]
* secret/cassandra: Properly store session for re-use [GH-1802]
* secret/ssh: Fix panic when revoking SSH dynamic keys [GH-1781]

## Previous Releases
For more information on previous releases, check out the changelog on [GitHub](https://github.com/hashicorp/vault/blob/v0.6.1/CHANGELOG.md).
    </releaseNotes>
    <projectUrl>https://www.vaultproject.io/</projectUrl>
    <docsUrl>https://www.vaultproject.io/docs/index.html</docsUrl>
    <bugTrackerUrl>https://github.com/hashicorp/vault/issues</bugTrackerUrl>
    <projectSourceUrl>https://github.com/hashicorp/vault</projectSourceUrl>
    <packageSourceUrl>https://github.com/jamestoyer/chocolatey-packages</packageSourceUrl>
    <tags>vault hashicorp</tags>
    <copyright>HashiCorp 2015-2016</copyright>
    <licenseUrl>https://github.com/hashicorp/vault/blob/master/LICENSE</licenseUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <!-- Important note about https://cdn.rawgit.com: Files are cached permanently after the first request. Use commit URLs when updating the icon. -->
    <iconUrl>https://cdn.rawgit.com/jamestoyer/chocolatey-packages/72ac58396679c27ed1a812a97909a24cf3068deb/vault/icons/vault.png</iconUrl>
    <!--<dependencies>
      <dependency id="" version="" />
    </dependencies>-->
  </metadata>
  <files>
    <file src="tools\**" target="tools" />
  </files>
</package>

<?xml version="1.0" encoding="utf-8"?>
<!-- Do not remove this test for UTF-8: if ??? doesn?t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
  <metadata>
    <!-- Read this before publishing packages to chocolatey.org: https://github.com/chocolatey/chocolatey/wiki/CreatePackages -->
    <id>vault</id>
    <title>Vault</title>
    <version>0.9.0</version>
    <authors>Mitchell Hashimoto, HashiCorp</authors>
    <owners>James Toyer</owners>
    <summary>Vault is a tool for securely accessing secrets</summary>
    <description>
Vault is a tool for securely accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, certificates, and more. Vault provides a unified interface to any secret, while providing tight access control and recording a detailed audit log.

A modern system requires access to a multitude of secrets: database credentials, API keys for external services, credentials for service-oriented architecture communication, etc. Understanding who is accessing what secrets is already very difficult and platform-specific. Adding on key rolling, secure storage, and detailed audit logs is almost impossible without a custom solution. This is where Vault steps in.

The key features of Vault are:

* **Secure Secret Storage**: Arbitrary key/value secrets can be stored in Vault. Vault encrypts these secrets prior to writing them to persistent storage, so gaining access to the raw storage isn't enough to access your secrets. Vault can write to disk, [Consul](https://www.consul.io), and more.
* **Dynamic Secrets**: Vault can generate secrets on-demand for some systems, such as AWS or SQL databases. For example, when an application needs to access an S3 bucket, it asks Vault for credentials, and Vault will generate an AWS keypair with valid permissions on demand. After creating these dynamic secrets, Vault will also automatically revoke them after the lease is up.
* **Data Encryption**: Vault can encrypt and decrypt data without storing it. This allows security teams to define encryption parameters and developers to store encrypted data in a location such as SQL without having to design their own encryption methods.
* **Leasing and Renewal**: All secrets in Vault have a _lease_ associated with it. At the end of the lease, Vault will automatically revoke that secret. Clients are able to renew leases via built-in renew APIs.
* **Revocation**: Vault has built-in support for secret revocation. Vault can revoke not only single secrets, but a tree of secrets, for example all secrets read by a specific user, or all secrets of a particular type. Revocation assists in key rolling as well as locking down systems in the case of an intrusion.

For more information, see the [introduction section](https://www.vaultproject.io/intro) of the Vault website.
    </description>
    <releaseNotes>
## 0.9.0 (November 14th, 2017)

DEPRECATIONS/CHANGES:

 * API HTTP client behavior: When calling `NewClient` the API no longer modifies the provided client/transport. In particular this means it will no longer enable redirection limiting and HTTP/2 support on custom clients. It is suggested that if you want to make changes to an HTTP client that you use one created by `DefaultConfig` as a starting point.
 * AWS EC2 client nonce behavior: The client nonce generated by the backend that gets returned along with the authentication response will be audited in plaintext. If this is undesired, the clients can choose to supply a custom nonce to the login endpoint. The custom nonce set by the client will from now on, not be returned back with the authentication response, and hence not audit logged.
 * AWS Auth role options: The API will now error when trying to create or update a role with the mutually-exclusive options `disallow_reauthentication` and `allow_instance_migration`.
 * SSH CA role read changes: When reading back a role from the `ssh` backend, the TTL/max TTL values will now be an integer number of seconds rather than a string. This better matches the API elsewhere in Vault.
 * SSH role list changes: When listing roles from the `ssh` backend via the API, the response data will additionally return a `key_info` map that will contain a map of each key with a corresponding object containing the `key_type`.
 * More granularity in audit logs: Audit request and response entires are still in RFC3339 format but now have a granularity of nanoseconds.

FEATURES:

 * **RSA Support for Transit Backend**: Transit backend can now generate RSA keys which can be used for encryption and signing. [GH-3489]
 * **Identity System**: Now in open source and with significant enhancements, Identity is an integrated system for understanding users across tokens and enabling easier management of users directly and via groups.
 * **External Groups in Identity**: Vault can now automatically assign users and systems to groups in Identity based on their membership in external groups.
 * **Seal Wrap / FIPS 140-2 Compatibility (Enterprise)**: Vault can now take advantage of FIPS 140-2-certified HSMs to ensure that Critical Security Parameters are protected in a compliant fashion. Vault's implementation has received a statement of compliance from Leidos.
 * **Control Groups (Enterprise)**: Require multiple members of an Identity group to authorize a requested action before it is allowed to run.
 * **Cloud Auto-Unseal (Enterprise)**: Automatically unseal Vault using AWS KMS and GCP CKMS.
 * **Sentinel Integration (Enterprise)**: Take advantage of HashiCorp Sentinel to create extremely flexible access control policies -- even on unauthenticated endpoints.
 * **Barrier Rekey Support for Auto-Unseal (Enterprise)**: When using auto-unsealing functionality, the `rekey` operation is now supported; it uses recovery keys to authorize the master key rekey.
 * **Operation Token for Disaster Recovery Actions (Enterprise)**: When using Disaster Recovery replication, a token can be created that can be used to authorize actions such as promotion and updating primary information, rather than using recovery keys.
 * **Trigger Auto-Unseal with Recovery Keys (Enterprise)**: When using auto-unsealing, a request to unseal Vault can be triggered by a threshold of recovery keys, rather than requiring the Vault process to be restarted.
 * **UI Redesign (Enterprise)**: All new experience for the Vault Enterprise UI. The look and feel has been completely redesigned to give users a better experience and make managing secrets fast and easy.
 * **UI: SSH Secret Backend (Enterprise)**: Configure an SSH secret backend, create and browse roles. And use them to sign keys or generate one time passwords.
 * **UI: AWS Secret Backend (Enterprise)**: You can now configure the AWS backend via the Vault Enterprise UI. In addition you can create roles, browse the roles and Generate IAM Credentials from them in the UI.

IMPROVEMENTS:

 * api: Add ability to set custom headers on each call [GH-3394]
 * command/server: Add config option to disable requesting client certificates [GH-3373]
 * core: Disallow mounting underneath an existing path, not just over [GH-2919]
 * physical/file: Use `700` as permissions when creating directories. The files themselves were `600` and are all encrypted, but this doesn't hurt.
 * secret/aws: Add ability to use custom IAM/STS endpoints [GH-3416]
 * secret/cassandra: Work around Cassandra ignoring consistency levels for a user listing query [GH-3469]
 * secret/pki: Private keys can now be marshalled as PKCS#8 [GH-3518]
 * secret/pki: Allow entering URLs for `pki` as both comma-separated strings and JSON arrays [GH-3409]
 * secret/ssh: Role TTL/max TTL can now be specified as either a string or an integer [GH-3507]
 * secret/transit: Sign and verify operations now support a `none` hash algorithm to allow signing/verifying pre-hashed data [GH-3448]
 * secret/database: Add the ability to glob allowed roles in the Database Backend [GH-3387]
 * ui (enterprise): Support for RSA keys in the transit backend
 * ui (enterprise): Support for DR Operation Token generation, promoting, and updating primary on DR Secondary clusters

BUG FIXES:

 * api: Fix panic when setting a custom HTTP client but with a nil transport [GH-3435] [GH-3437]
 * api: Fix authing to the `cert` backend when the CA for the client cert is not known to the server's listener [GH-2946]
 * auth/approle: Create role ID index during read if a role is missing one [GH-3561]
 * auth/aws: Don't allow mutually exclusive options [GH-3291]
 * auth/radius: Fix logging in in some situations [GH-3461]
 * core: Fix memleak when a connection would connect to the cluster port and then go away [GH-3513]
 * core: Fix panic if a single-use token is used to step-down or seal [GH-3497]
 * core: Set rather than add headers to prevent some duplicated headers in responses when requests were forwarded to the active node [GH-3485]
 * physical/etcd3: Fix some listing issues due to how etcd3 does prefix matching [GH-3406]
 * physical/etcd3: Fix case where standbys can lose their etcd client lease [GH-3031]
 * physical/file: Fix listing when underscores are the first component of a path [GH-3476]
 * plugins: Allow response errors to be returned from backend plugins [GH-3412]
 * secret/transit: Fix panic if the length of the input ciphertext was less than the expected nonce length [GH-3521]
 * ui (enterprise): Reinstate support for generic secret backends - this was erroneously removed in a previous release

## Previous Releases
For more information on previous releases, check out the changelog on [GitHub](https://github.com/hashicorp/vault/blob/v0.9.0/CHANGELOG.md).
    </releaseNotes>
    <projectUrl>https://www.vaultproject.io/</projectUrl>
    <docsUrl>https://www.vaultproject.io/docs/index.html</docsUrl>
    <bugTrackerUrl>https://github.com/hashicorp/vault/issues</bugTrackerUrl>
    <projectSourceUrl>https://github.com/hashicorp/vault</projectSourceUrl>
    <packageSourceUrl>https://github.com/jamestoyer/chocolatey-packages</packageSourceUrl>
    <tags>vault hashicorp</tags>
    <copyright>HashiCorp 2015-2018</copyright>
    <licenseUrl>https://github.com/hashicorp/vault/blob/master/LICENSE</licenseUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <!-- Important note about https://cdn.rawgit.com: Files are cached permanently after the first request. Use commit URLs when updating the icon. -->
    <iconUrl>https://cdn.rawgit.com/jamestoyer/chocolatey-packages/68bd9f48bdf960b40c3b1a590c7aac3f0fdfb59f/vault/icons/vault.png</iconUrl>
    <!--<dependencies>
      <dependency id="" version="" />
    </dependencies>-->
  </metadata>
  <files>
    <file src="tools\**" target="tools" />
  </files>
</package>

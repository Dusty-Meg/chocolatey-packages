<?xml version="1.0" encoding="utf-8"?>
<!-- Do not remove this test for UTF-8: if ??? doesn?t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
  <metadata>
    <!-- Read this before publishing packages to chocolatey.org: https://github.com/chocolatey/chocolatey/wiki/CreatePackages -->
    <id>vault</id>
    <title>Vault</title>
    <version>0.7.3</version>
    <authors>Mitchell Hashimoto, HashiCorp</authors>
    <owners>James Toyer</owners>
    <summary>Vault is a tool for securely accessing secrets</summary>
    <description>
Vault is a tool for securely accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, certificates, and more. Vault provides a unified interface to any secret, while providing tight access control and recording a detailed audit log.

A modern system requires access to a multitude of secrets: database credentials, API keys for external services, credentials for service-oriented architecture communication, etc. Understanding who is accessing what secrets is already very difficult and platform-specific. Adding on key rolling, secure storage, and detailed audit logs is almost impossible without a custom solution. This is where Vault steps in.

The key features of Vault are:

* **Secure Secret Storage**: Arbitrary key/value secrets can be stored in Vault. Vault encrypts these secrets prior to writing them to persistent storage, so gaining access to the raw storage isn't enough to access your secrets. Vault can write to disk, [Consul](https://www.consul.io), and more.
* **Dynamic Secrets**: Vault can generate secrets on-demand for some systems, such as AWS or SQL databases. For example, when an application needs to access an S3 bucket, it asks Vault for credentials, and Vault will generate an AWS keypair with valid permissions on demand. After creating these dynamic secrets, Vault will also automatically revoke them after the lease is up.
* **Data Encryption**: Vault can encrypt and decrypt data without storing it. This allows security teams to define encryption parameters and developers to store encrypted data in a location such as SQL without having to design their own encryption methods.
* **Leasing and Renewal**: All secrets in Vault have a _lease_ associated with it. At the end of the lease, Vault will automatically revoke that secret. Clients are able to renew leases via built-in renew APIs.
* **Revocation**: Vault has built-in support for secret revocation. Vault can revoke not only single secrets, but a tree of secrets, for example all secrets read by a specific user, or all secrets of a particular type. Revocation assists in key rolling as well as locking down systems in the case of an intrusion.

For more information, see the [introduction section](https://www.vaultproject.io/intro) of the Vault website.
    </description>
    <releaseNotes>
## 0.7.3 (June 7th, 2017)

SECURITY:

* Cert auth backend now checks validity of individual certificates: In previous versions of Vault, validity (e.g. expiration) of individual leaf certificates added for authentication was not checked. This was done to make it easier for administrators to control lifecycles of individual certificates added to the backend, e.g. the authentication material being checked was access to that specific certificate's private key rather than all private keys signed by a CA. However, this behavior is often unexpected and as a result can lead to insecure deployments, so we are now validating these certificates as well.
* App-ID path salting was skipped in 0.7.1/0.7.2: A regression in 0.7.1/0.7.2 caused the HMACing of any App-ID information stored in paths (including actual app-IDs and user-IDs) to be unsalted and written as-is from the API. In 0.7.3 any such paths will be automatically changed to salted versions on access (e.g. login or read); however, if you created new app-IDs or user-IDs in 0.7.1/0.7.2, you may want to consider whether any users with access to Vault's underlying data store may have intercepted these values, and revoke/roll them.

DEPRECATIONS/CHANGES:

* Step-Down is Forwarded: When a step-down is issued against a non-active node in an HA cluster, it will now forward the request to the active node.

FEATURES:

* **ed25519 Signing/Verification in Transit with Key Derivation**: The `transit` backend now supports generating [ed25519](https://ed25519.cr.yp.to/) keys for signing and verification functionality. These keys support derivation, allowing you to modify the actual encryption key used by supplying a `context` value.
* **Key Version Specification for Encryption in Transit**: You can now specify the version of a key you use to wish to generate a signature, ciphertext, or HMAC. This can be controlled by the `min_encryption_version` key configuration property.
* **Replication Primary Discovery (Enterprise)**: Replication primaries will now advertise the addresses of their local HA cluster members to replication secondaries. This helps recovery if the primary active node goes down and neither service discovery nor load balancers are in use to steer clients.

IMPROVEMENTS:

* api/health: Add Sys().Health() [GH-2805]
* audit: Add auth information to requests that error out [GH-2754]
* command/auth: Add `-no-store` option that prevents the auth command from storing the returned token into the configured token helper [GH-2809]
* core/forwarding: Request forwarding now heartbeats to prevent unused connections from being terminated by firewalls or proxies
* plugins/databases: Add MongoDB as an internal database plugin [GH-2698]
* storage/dynamodb: Add a method for checking the existence of children, speeding up deletion operations in the DynamoDB storage backend [GH-2722]
* storage/mysql: Add max_parallel parameter to MySQL backend [GH-2760]
* secret/databases: Support listing connections [GH-2823]
* secret/databases: Support custom renewal statements in Postgres database plugin [GH-2788]
* secret/databases: Use the role name as part of generated credentials [GH-2812]
* ui (Enterprise): Transit key and secret browsing UI handle large lists better
* ui (Enterprise): root tokens are no longer persisted
* ui (Enterprise): support for mounting Database and TOTP secret backends

BUG FIXES:

* auth/app-id: Fix regression causing loading of salts to be skipped
* auth/aws: Improve EC2 describe instances performance [GH-2766]
* auth/aws: Fix lookup of some instance profile ARNs [GH-2802]
* auth/aws: Resolve ARNs to internal AWS IDs which makes lookup at various points (e.g. renewal time) more robust [GH-2814]
* auth/aws: Properly honor configured period when using IAM authentication [GH-2825]
* auth/aws: Check that a bound IAM principal is not empty (in the current state of the role) before requiring it match the previously authenticated client [GH-2781]
* auth/cert: Fix panic on renewal [GH-2749]
* auth/cert: Certificate verification for non-CA certs [GH-2761]
* core/acl: Prevent race condition when compiling ACLs in some scenarios [GH-2826]
* secret/database: Increase wrapping token TTL; in a loaded scenario it could be too short
* secret/generic: Allow integers to be set as the value of `ttl` field as the documentation claims is supported [GH-2699]
* secret/ssh: Added host key callback to ssh client config [GH-2752]
* storage/s3: Avoid a panic when some bad data is returned [GH-2785]
* storage/dynamodb: Fix list functions working improperly on Windows [GH-2789]
* storage/file: Don't leak file descriptors in some error cases
* storage/swift: Fix pre-v3 project/tenant name reading [GH-2803]

## Previous Releases
For more information on previous releases, check out the changelog on [GitHub](https://github.com/hashicorp/vault/blob/v0.7.3/CHANGELOG.md).
    </releaseNotes>
    <projectUrl>https://www.vaultproject.io/</projectUrl>
    <docsUrl>https://www.vaultproject.io/docs/index.html</docsUrl>
    <bugTrackerUrl>https://github.com/hashicorp/vault/issues</bugTrackerUrl>
    <projectSourceUrl>https://github.com/hashicorp/vault</projectSourceUrl>
    <packageSourceUrl>https://github.com/jamestoyer/chocolatey-packages</packageSourceUrl>
    <tags>vault hashicorp</tags>
    <copyright>HashiCorp 2015-2017</copyright>
    <licenseUrl>https://github.com/hashicorp/vault/blob/master/LICENSE</licenseUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <!-- Important note about https://cdn.rawgit.com: Files are cached permanently after the first request. Use commit URLs when updating the icon. -->
    <iconUrl>https://cdn.rawgit.com/jamestoyer/chocolatey-packages/68bd9f48bdf960b40c3b1a590c7aac3f0fdfb59f/vault/icons/vault.png</iconUrl>
    <!--<dependencies>
      <dependency id="" version="" />
    </dependencies>-->
  </metadata>
  <files>
    <file src="tools\**" target="tools" />
  </files>
</package>

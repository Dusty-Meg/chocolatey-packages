<?xml version="1.0" encoding="utf-8"?>
<!-- Do not remove this test for UTF-8: if ??? doesn?t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
  <metadata>
    <!-- Read this before publishing packages to chocolatey.org: https://github.com/chocolatey/chocolatey/wiki/CreatePackages -->
    <id>vault</id>
    <title>Vault</title>
    <version>0.7.1</version>
    <authors>Mitchell Hashimoto, HashiCorp</authors>
    <owners>James Toyer</owners>
    <summary>Vault is a tool for securely accessing secrets</summary>
    <description>
Vault is a tool for securely accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, certificates, and more. Vault provides a unified interface to any secret, while providing tight access control and recording a detailed audit log.

A modern system requires access to a multitude of secrets: database credentials, API keys for external services, credentials for service-oriented architecture communication, etc. Understanding who is accessing what secrets is already very difficult and platform-specific. Adding on key rolling, secure storage, and detailed audit logs is almost impossible without a custom solution. This is where Vault steps in.

The key features of Vault are:

* **Secure Secret Storage**: Arbitrary key/value secrets can be stored in Vault. Vault encrypts these secrets prior to writing them to persistent storage, so gaining access to the raw storage isn't enough to access your secrets. Vault can write to disk, [Consul](https://www.consul.io), and more.
* **Dynamic Secrets**: Vault can generate secrets on-demand for some systems, such as AWS or SQL databases. For example, when an application needs to access an S3 bucket, it asks Vault for credentials, and Vault will generate an AWS keypair with valid permissions on demand. After creating these dynamic secrets, Vault will also automatically revoke them after the lease is up.
* **Data Encryption**: Vault can encrypt and decrypt data without storing it. This allows security teams to define encryption parameters and developers to store encrypted data in a location such as SQL without having to design their own encryption methods.
* **Leasing and Renewal**: All secrets in Vault have a _lease_ associated with it. At the end of the lease, Vault will automatically revoke that secret. Clients are able to renew leases via built-in renew APIs.
* **Revocation**: Vault has built-in support for secret revocation. Vault can revoke not only single secrets, but a tree of secrets, for example all secrets read by a specific user, or all secrets of a particular type. Revocation assists in key rolling as well as locking down systems in the case of an intrusion.

For more information, see the [introduction section](https://www.vaultproject.io/intro) of the Vault website.
    </description>
    <releaseNotes>
## 0.7.1 (May 5th, 2017)

DEPRECATIONS/CHANGES:

* LDAP Auth Backend: Group membership queries will now run as the `binddn` user when `binddn`/`bindpass` are configured, rather than as the authenticating user as was the case previously.
FEATURES:

* **AWS IAM Authentication**: IAM principals can get Vault tokens automatically, opening AWS-based authentication to users, ECS containers, Lambda instances, and more. Signed client identity information retrieved using the AWS API `sts:GetCallerIdentity` is validated against the AWS STS service before issuing a Vault token. This backend is unified with the `aws-ec2` authentication backend, and allows additional EC2-related restrictions to be applied during the IAM authentication; the previous EC2 behavior is also still available. [GH-2441]
* **MSSQL Physical Backend**: You can now use Microsoft SQL Server as your Vault physical data store [GH-2546]
* **Lease Listing and Lookup**: You can now introspect a lease to get its creation and expiration properties via `sys/leases/lookup`; with `sudo` capability you can also list leases for lookup, renewal, or revocation via that endpoint. Various lease functions (renew, revoke, revoke-prefix, revoke-force) have also been relocated to `sys/leases/`, but they also work at the old paths for compatibility. Reading (but not listing) leases via `sys/leases/lookup` is now a part of the current `default` policy. [GH-2650]
* **TOTP Secret Backend**: You can now store multi-factor authentication keys in Vault and use the API to retrieve time-based one-time use passwords on demand. The backend can also be used to generate a new key and validate passwords generated by that key. [GH-2492]
* **Database Secret Backend &amp; Secure Plugins (Beta)**: This new secret backend combines the functionality of the MySQL, PostgreSQL, MSSQL, and Cassandra backends. It also provides a plugin interface for extendability through custom databases. [GH-2200]

IMPROVEMENTS:

* auth/cert: Support for constraints on subject Common Name and DNS/email Subject Alternate Names in certificates [GH-2595]
* auth/ldap: Use the binding credentials to search group membership rather than the user credentials [GH-2534]
* cli/revoke: Add `-self` option to allow revoking the currently active token [GH-2596]
* core: Randomize x coordinate in Shamir shares [GH-2621]
* tidy: Improvements to `auth/token/tidy` and `sys/leases/tidy` to handle more cleanup cases [GH-2452]
* secret/pki: Add `no_store` option that allows certificates to be issued without being stored. This removes the ability to look up and/or add to a CRL but helps with scaling to very large numbers of certificates. [GH-2565]
* secret/pki: If used with a role parameter, the `sign-verbatim/&lt;role&gt;` endpoint honors the values of `generate_lease`, `no_store`, `ttl` and `max_ttl` from the given role [GH-2593]
* secret/pki: Add role parameter `allow_glob_domains` that enables defining names in `allowed_domains` containing `*` glob patterns [GH-2517]
* secret/pki: Update certificate storage to not use characters that are not supported on some filesystems [GH-2575]
* storage/etcd3: Add `discovery_srv` option to query for SRV records to find servers [GH-2521]
* storage/s3: Support `max_parallel` option to limit concurrent outstanding requests [GH-2466]
* storage/s3: Use pooled transport for http client [GH-2481]
* storage/swift: Allow domain values for V3 authentication [GH-2554]

BUG FIXES:

* api: Respect a configured path in Vault's address [GH-2588]
* auth/aws-ec2: New bounds added as criteria to allow role creation [GH-2600]
* auth/ldap: Don't lowercase groups attached to users [GH-2613]
* cli: Don't panic if `vault write` is used with the `force` flag but no path [GH-2674]
* core: Help operations should request forward since standbys may not have appropriate info [GH-2677]
* secret/mssql: Update mssql driver to support queries with colons [GH-2610]
* secret/pki: Don't lowercase O/OU values in certs [GH-2555]
* secret/pki: Don't attempt to validate IP SANs if none are provided [GH-2574]
* secret/ssh: Don't automatically lowercase principles in issued SSH certs [GH-2591]
* storage/consul: Properly handle state events rather than timing out [GH-2548]
* storage/etcd3: Ensure locks are released if client is improperly shut down [GH-2526]

## Previous Releases
For more information on previous releases, check out the changelog on [GitHub](https://github.com/hashicorp/vault/blob/v0.7.1/CHANGELOG.md).
    </releaseNotes>
    <projectUrl>https://www.vaultproject.io/</projectUrl>
    <docsUrl>https://www.vaultproject.io/docs/index.html</docsUrl>
    <bugTrackerUrl>https://github.com/hashicorp/vault/issues</bugTrackerUrl>
    <projectSourceUrl>https://github.com/hashicorp/vault</projectSourceUrl>
    <packageSourceUrl>https://github.com/jamestoyer/chocolatey-packages</packageSourceUrl>
    <tags>vault hashicorp</tags>
    <copyright>HashiCorp 2015-2017</copyright>
    <licenseUrl>https://github.com/hashicorp/vault/blob/master/LICENSE</licenseUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <!-- Important note about https://cdn.rawgit.com: Files are cached permanently after the first request. Use commit URLs when updating the icon. -->
    <iconUrl>https://cdn.rawgit.com/jamestoyer/chocolatey-packages/72ac58396679c27ed1a812a97909a24cf3068deb/vault/icons/vault.png</iconUrl>
    <!--<dependencies>
      <dependency id="" version="" />
    </dependencies>-->
  </metadata>
  <files>
    <file src="tools\**" target="tools" />
  </files>
</package>

<?xml version="1.0" encoding="utf-8"?>
<!-- Do not remove this test for UTF-8: if ??? doesn?t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
  <metadata>
    <!-- Read this before publishing packages to chocolatey.org: https://github.com/chocolatey/chocolatey/wiki/CreatePackages -->
    <id>vault</id>
    <title>Vault</title>
    <version>0.9.4</version>
    <authors>Mitchell Hashimoto, HashiCorp</authors>
    <owners>James Toyer</owners>
    <summary>Vault is a tool for securely accessing secrets</summary>
    <description>
Vault is a tool for securely accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, certificates, and more. Vault provides a unified interface to any secret, while providing tight access control and recording a detailed audit log.

A modern system requires access to a multitude of secrets: database credentials, API keys for external services, credentials for service-oriented architecture communication, etc. Understanding who is accessing what secrets is already very difficult and platform-specific. Adding on key rolling, secure storage, and detailed audit logs is almost impossible without a custom solution. This is where Vault steps in.

The key features of Vault are:

* **Secure Secret Storage**: Arbitrary key/value secrets can be stored in Vault. Vault encrypts these secrets prior to writing them to persistent storage, so gaining access to the raw storage isn't enough to access your secrets. Vault can write to disk, [Consul](https://www.consul.io), and more.
* **Dynamic Secrets**: Vault can generate secrets on-demand for some systems, such as AWS or SQL databases. For example, when an application needs to access an S3 bucket, it asks Vault for credentials, and Vault will generate an AWS keypair with valid permissions on demand. After creating these dynamic secrets, Vault will also automatically revoke them after the lease is up.
* **Data Encryption**: Vault can encrypt and decrypt data without storing it. This allows security teams to define encryption parameters and developers to store encrypted data in a location such as SQL without having to design their own encryption methods.
* **Leasing and Renewal**: All secrets in Vault have a _lease_ associated with it. At the end of the lease, Vault will automatically revoke that secret. Clients are able to renew leases via built-in renew APIs.
* **Revocation**: Vault has built-in support for secret revocation. Vault can revoke not only single secrets, but a tree of secrets, for example all secrets read by a specific user, or all secrets of a particular type. Revocation assists in key rolling as well as locking down systems in the case of an intrusion.

For more information, see the [introduction section](https://www.vaultproject.io/intro) of the Vault website.
    </description>
    <releaseNotes>
## 0.9.4 (February 20th, 2018)

SECURITY:

* Role Tags used with the EC2 style of AWS auth were being improperly parsed; as a result they were not being used to properly restrict values. Implementations following our suggestion of using these as defense-in-depth rather than the only source of restriction should not have significant impact.

FEATURES:

* **ChaCha20-Poly1305 support in `transit`**: You can now encrypt and decrypt with ChaCha20-Poly1305 in `transit`. Key derivation and convergent encryption is also supported.
* **Okta Push support in Okta Auth Backend**: If a user account has MFA required within Okta, an Okta Push MFA flow can be used to successfully finish authentication.
* **PKI Improvements**: Custom OID subject alternate names can now be set, subject to allow restrictions that support globbing. Additionally, Country, Locality, Province, Street Address, and Postal Code can now be set in certificate subjects.
* **Manta Storage**: Joyent Triton Manta can now be used for Vault storage
* **Google Cloud Spanner Storage**: Google Cloud Spanner can now be used for Vault storage

IMPROVEMENTS:

* auth/centrify: Add CLI helper
* audit: Always log failure metrics, even if zero, to ensure the values appear on dashboards [GH-3937]
* cli: Disable color when output is not a TTY [GH-3897]
* cli: Add `-format` flag to all subcommands [GH-3897]
* cli: Do not display deprecation warnings when the format is not table [GH-3897]
* core: If over a predefined lease count (256k), log a warning not more than once a minute. Too many leases can be problematic for many of the storage backends and often this number of leases is indicative of a need for workflow improvements. [GH-3957]
* secret/nomad: Have generated ACL tokens cap out at 64 characters [GH-4009]
* secret/pki: Country, Locality, Province, Street Address, and Postal Code can now be set on certificates [GH-3992]
* secret/pki: UTF-8 Other Names can now be set in Subject Alternate Names in issued certs; allowed values can be set per role and support globbing [GH-3889]
* secret/pki: Add a flag to make the common name optional on certs [GH-3940]
* secret/pki: Ensure only DNS-compatible names go into DNS SANs; additionally, properly handle IDNA transformations for these DNS names [GH-3953]
* secret/ssh: Add `valid-principles` flag to CLI for CA mode [GH-3922]
* storage/manta: Add Manta storage [GH-3270]
* ui (Enterprise): Support for ChaCha20-Poly1305 keys in the transit engine.

BUG FIXES:

* api/renewer: Honor increment value in renew auth calls [GH-3904]
* auth/approle: Fix inability to use limited-use-count secret IDs on replication performance secondaries
* auth/approle: Cleanup of secret ID accessors during tidy and removal of dangling accessor entries [GH-3924]
* auth/aws-ec2: Avoid masking of role tag response [GH-3941]
* auth/cert: Verify DNS SANs in the authenticating certificate [GH-3982]
* auth/okta: Return configured durations as seconds, not nanoseconds [GH-3871]
* auth/token: Token creation via the CLI no longer forces periodic token creation. Passing an explicit zero value for the period no longer create periodic tokens. [GH-3880]
* command/rekey: Re-add lost `stored-shares` parameter [GH-3974]
* command/ssh: Create and reuse the api client [GH-3909]
* command/status: Fix panic when status returns 500 from leadership lookup [GH-3998]
* identity: Fix race when creating entities [GH-3932]
* plugin/gRPC: Fixed an issue with list requests and raw responses coming from plugins using gRPC transport [GH-3881]
* plugin/gRPC: Fix panic when special paths are not set [GH-3946]
* secret/pki: Verify a name is a valid hostname before adding to DNS SANs [GH-3918]
* secret/transit: Fix auditing when reading a key after it has been backed up or restored [GH-3919]
* secret/transit: Fix storage/memory consistency when persistence fails [GH-3959]
* storage/consul: Validate that service names are RFC 1123 compliant [GH-3960]
* storage/etcd3: Fix memory ballooning with standby instances [GH-3798]
* storage/etcd3: Fix large lists (like token loading at startup) not being handled [GH-3772]
* storage/postgresql: Fix compatibility with versions using custom string version tags [GH-3949]
* storage/zookeeper: Update vendoring to fix freezing issues [GH-3896]
* ui (Enterprise): Decoding the replication token should no longer error and prevent enabling of a secondary replication cluster via the ui.
* plugin/gRPC: Add connection info to the request object [GH-3997]

## Previous Releases
For more information on previous releases, check out the changelog on [GitHub](https://github.com/hashicorp/vault/blob/v0.9.3/CHANGELOG.md).
    </releaseNotes>
    <projectUrl>https://www.vaultproject.io/</projectUrl>
    <docsUrl>https://www.vaultproject.io/docs/index.html</docsUrl>
    <bugTrackerUrl>https://github.com/hashicorp/vault/issues</bugTrackerUrl>
    <projectSourceUrl>https://github.com/hashicorp/vault</projectSourceUrl>
    <packageSourceUrl>https://github.com/jamestoyer/chocolatey-packages</packageSourceUrl>
    <tags>vault hashicorp</tags>
    <copyright>HashiCorp 2015-2018</copyright>
    <licenseUrl>https://github.com/hashicorp/vault/blob/master/LICENSE</licenseUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <!-- Important note about https://cdn.rawgit.com: Files are cached permanently after the first request. Use commit URLs when updating the icon. -->
    <iconUrl>https://cdn.rawgit.com/jamestoyer/chocolatey-packages/68bd9f48bdf960b40c3b1a590c7aac3f0fdfb59f/vault/icons/vault.png</iconUrl>
    <!--<dependencies>
      <dependency id="" version="" />
    </dependencies>-->
  </metadata>
  <files>
    <file src="tools\**" target="tools" />
  </files>
</package>
